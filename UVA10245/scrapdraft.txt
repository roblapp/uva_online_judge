#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>

#define MAXN 10000

struct point {

    double x, y;
};

typedef struct point point;

point a[MAXN];
int n;

FILE *fp;

int compare( const void *a, const void *b )
{
    point pa = * ( point * ) a;
    point pb = * ( point * ) b;

    if ( pa.x < pb.x )
        return -1;
    else if ( pa.x > pb.x )
        return 1;
    else /* same x values */
        if ( pa.y < pb.y )
            return -1;
        else if ( pa.y > pb.y )
            return 1;
        else
            return 0;
}

void show()
{
    int i;
    for ( i = 0; i < n; i++ )
        printf("(%lf, %lf)\n", a[i].x, a[i].y );
    printf("\n");
}

void show_point( point pa )
{
    printf("%lf , %lf\n", pa.x, pa.y );
}

/* returns distance squared */
double dist( point pa, point pb )
{
    return ( ( pa.x - pb.x) * ( pa.x - pb.x) + ( pa.y - pb.y ) * ( pa.y - pb.y ) );
}

double d( point pa, point pb )
{
    return sqrt( ( pa.x - pb.x) * ( pa.x - pb.x) + ( pa.y - pb.y ) * ( pa.y - pb.y ) );
}

double solve()
{
    int i, j, pa = 0, pb = 1;
    double sd = INT_MAX;/* smallest distance */

    for ( i = 0; i < n - 1; i++ )
    {
        for ( j = i + 1; j < n; j++ )
        {
           if ( dist( a[i], a[j] ) < sd )
           {
               sd = dist( a[i], a[j] );
                pa = i;
                pb = j;
           }
        }
    }

    return d( a[pa], a[pb] );
}

int main()
{
    int i;
    double di;

    fp = fopen("test.txt", "r" );

    while ( fscanf(fp, "%i", &n ) == 1 && n != 0 )
    {
        for ( i = 0; i < n; i++ )
        {
            fscanf(fp, "%lf %lf", &a[i].x, &a[i].y );
        }
        qsort( &a, n, sizeof( point ), compare );

        di = solve();

        if ( di > 10000 )
            printf("INFINITY\n");
        else
            printf("%.4lf\n", di );
    }

    fclose( fp );

    return 0;
}
